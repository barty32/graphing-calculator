import Graph from './graph.js';
//import math from './mathjs';
import Parser from './index.js';

enum LineType{
    expression,
    rawData,
    audio
}

interface AudioSpec{
    custom: boolean;
    waveType: string;
    frequency: number;
    amplitude: number;
    duty: number;
    skew: number;
    phase: number;
    bias: number;
}

interface Line {
    color: string;
    id: string;
    type: LineType;
    expression: string;
    data: number[];
    audio: AudioSpec | null;
    playing: boolean;
    visible: boolean;
    audioCtx: AudioContext | null;
}

var lines: Line[] = [];
var currentLine: Line;

const graph = new Graph(document.querySelector('#graph') as HTMLCanvasElement);
// graph.addLine((x) => {
//     return Math.sin(x);
// }, 'audio', "red");

// graph.addLine((x) => {
//     return Math.sin(x - (4 / 3 * Math.PI));
// }, 'audiocos2', "lime");

// graph.addLine((x) => {
//     return Math.sin(x - (2/3*Math.PI));
// }, 'audiocos', "blue");

// graph.addLine((x) => {
//     return Math.cos(x);
// }, 'audiocos', "purple");

graph.draw();



document.querySelector('#add')?.addEventListener('click', () => {
    addLine(LineType.expression);
});
document.querySelector('#add-audio')?.addEventListener('click', () => {
    addLine(LineType.audio);
});
document.querySelector('#add-data')?.addEventListener('click', () => {
    addLine(LineType.rawData);
});

document.querySelector('#zoom-in')?.addEventListener('click', () => {
    graph.zoom(-100, graph.width / 2, graph.height / 2);
});
document.querySelector('#zoom-out')?.addEventListener('click', () => {
    graph.zoom(100, graph.width / 2, graph.height / 2);
});
document.querySelector('#zoom-home')?.addEventListener('click', () => {
    graph.resetZoom();
});

document.querySelector('#audio-back')?.addEventListener('click', () => {
    (document.querySelector('#wave-panel') as HTMLDivElement).style.transform = 'translateX(0)';
    (document.querySelector('#audio-panel') as HTMLDivElement).style.transform = 'translateX(110%)';
});


document.querySelector('#wave-select')?.addEventListener('change', (e) => {
    if(currentLine.audio) currentLine.audio.waveType = (e.target as HTMLSelectElement).value;
    audioParamsUpdated();
});
addSliderSyncGroup('frequency', 0, 22000, (val) => {
    if(currentLine.audio) currentLine.audio.frequency = val;
    audioParamsUpdated();
});
addSliderSyncGroup('duty', 0, 100, (val) => {
    if(currentLine.audio) currentLine.audio.duty = val;
    audioParamsUpdated();
});
addSliderSyncGroup('amplitude', 0, 100, (val) => {
    if(currentLine.audio) currentLine.audio.amplitude = val;
    audioParamsUpdated();
});
addSliderSyncGroup('skew', 0, 100, (val) => {
    if(currentLine.audio) currentLine.audio.skew = val;
    audioParamsUpdated();
});
addSliderSyncGroup('phase', 0, 360, (val) => {
    if(currentLine.audio) currentLine.audio.phase = val;
    audioParamsUpdated();
});

function addLine(type: LineType) {
    const id = getUniqueLineId(type);
    const color = '#' + Math.floor(Math.random() * 16777215).toString(16);
    const audioSpec = type == LineType.audio ? {
        custom: false,
        waveType: "sine",
        frequency: 440,
        amplitude: 50,
        duty: 50,
        skew: 50,
        phase: 0,
        bias: 0,
    } : null;
    lines.push({ color: color, id: id, type: type, expression: "100sin(0.01*2*3.141592654*x)", data: [], audio: audioSpec, playing: false, visible: true, audioCtx: null });
    graph.addLine(() => {
        return Infinity;
    }, id, type == LineType.rawData ? 2 : 0, color);
    const line = lines[lines.length - 1];
    const waveList = document.querySelector('#wave-panel') as HTMLDivElement;
    const subContainer = document.createElement('div');
    subContainer.classList.add('sub-container', 'rounded', 'wave-box');
    subContainer.id = id;
    const row1 = document.createElement('div');
    row1.classList.add('input-group');

    //add items to row 1

    const btn1 = document.createElement('a');
    btn1.type = 'button';
    btn1.classList.add('btn', 'btn-secondary', 'wave-btn');
    btn1.innerHTML = '<img src="/assets/images/eye.svg">';
    btn1.addEventListener('click', (e) => {
        //change visibility
        line.visible = !line.visible;
        btn1.innerHTML = `<img src="/assets/images/${line.visible ? 'eye' : 'eye-off'}.svg">`;
        graph.getLine(id).on = line.visible;
        graph.draw();
    });
    row1.appendChild(btn1);

    //id input
    const idInput = document.createElement('input');
    idInput.type = 'text';
    idInput.classList.add('form-control');
    idInput.disabled = true;
    idInput.value = id;
    // idInput.addEventListener('input', (e) => {
    //     //change id
    // });
    row1.appendChild(idInput);

    if (type == LineType.audio) {
        const btn2 = document.createElement('a');
        btn2.type = 'button';
        btn2.classList.add('btn', 'btn-success', 'wave-btn');
        btn2.innerHTML = '<img src="/assets/images/play.svg">';
        btn2.addEventListener('click', (e) => {
            //play audio
            if (line.playing) {
                line.playing = false;
                console.log('Audio stopped');
                line.audioCtx?.suspend();
            }
            else {
                line.playing = true;
                if (!line.source) {
                    line.audioCtx = playAudio(graph.getLine(id).fn);
                    line.audioCtx?.start();
                }
                console.log('Audio started');
            }
            
        });
        row1.appendChild(btn2);
    }

    const btn3 = document.createElement('a');
    btn3.type = 'button';
    btn3.classList.add('btn', 'btn-secondary', 'wave-btn');
    btn3.innerHTML = '<img src="/assets/images/settings.svg">';
    btn3.addEventListener('click', (e) => {
        editLine(id);
    });
    row1.appendChild(btn3);

    const btn4 = document.createElement('a');
    btn4.type = 'button';
    btn4.classList.add('btn', 'btn-danger', 'wave-btn');
    btn4.innerHTML = '<img src="/assets/images/trash.svg">';
    btn4.addEventListener('click', (e) => {
        //remove
        subContainer.remove();
        lines.find((value, index) => {
            if (value.id == id) {
                lines.splice(index, 1);
                graph.removeLine(id);
                graph.draw();
                return true;
            }
            return false;
        });
    });
    row1.appendChild(btn4);

    subContainer.appendChild(row1);

    if (type == LineType.expression) {
        const row2 = document.createElement('div');
        row2.classList.add('input-group', 'mt-2');
        row2.innerHTML = `
            <span class="input-group-text input-label-box">f(x):</span>
            `;//<span class="tooltiptext rounded">Tooltip text</span>
        const errorImg = document.createElement('img');
        errorImg.src = '/assets/images/error.svg';
        errorImg.classList.add('error-img');
        row2.appendChild(errorImg);
        const tooltip = document.createElement('span');
        tooltip.classList.add('e-tooltip', 'rounded');
        row2.appendChild(tooltip);
        const fnInput = document.createElement('input');
        fnInput.type = 'text';
        fnInput.classList.add('form-control');
        fnInput.addEventListener('input', (e) => {
            line.expression = (e.target as HTMLInputElement).value;
            //TODO: use better math parser
            // try {
            //     graph.getLine(id).fn = new Function('x', `return ${(e.target as HTMLInputElement).value}`)
            // }
            // catch (e) {
            //     errorImg.style.display = 'block';
            //     const tText = row2.querySelector('.e-tooltip');
            //     if (tText) tText.innerHTML = e.message;
            // }
            //     (x) => {
            //     return eval((e.target as HTMLInputElement).value);
            // }

            graph.getLine(id).fn = (x) => {
                let result = Infinity;
                try {
                    result = Parser.evaluate(line.expression, { x: x }, { useRadians: true });
                    errorImg.style.display = 'none';
                }
                catch (e) {
                    errorImg.style.display = 'block';
                    const tText = row2.querySelector('.e-tooltip');
                    if (tText) tText.innerHTML = e.message;
                }
                return result;
            }
            graph.draw();
        });
        row2.appendChild(fnInput);
        subContainer.appendChild(row2);
    }
    else if (type = LineType.rawData) {
        const row2 = document.createElement('div');
        row2.classList.add('input-group', 'mt-2');
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.classList.add('form-control');
        fileInput.addEventListener('change', (e) => {
            if (!fileInput.files?.length) return;
            fileInput.files[0].text().then((jsonData) => {
                const obj = JSON.parse(jsonData);
                if (obj.format != "GraphingCore_v1.0") throw new Error("Unsupported JSON file format");
                line.data = obj.data;
                graph.getLine(id).xRes = obj.resolution;
                graph.getLine(id).fn = (x) => {
                    return line.data[Math.round(x)];
                }
                graph.draw();
            })
        });
        row2.appendChild(fileInput);
        subContainer.appendChild(row2);
    }

    waveList.appendChild(subContainer);


}

function audioParamsUpdated() {
    // const audioSpec = audio ? {
    //     custom: false,
    //     waveType: "sine",
    //     frequency: 440,
    //     amplitude: 50,
    //     duty: 50,
    //     skew: 50,
    //     phase: 0,
    //     bias: 0,
    // } : null;

    const line = currentLine;

    if (line.audio) {
        graph.getLine(line.id).fn = (x) => {
            return line.audio.amplitude / 100 * Math.sin(line.audio.frequency * x + line.audio.phase / 180 * Math.PI);
        }
        graph.draw();
        if (line.audioCtx) {
            switch (line.audio.waveType) {
                case 'sine':
                    line.audioCtx.type = 'sine';
                    break;
                case 'square':
                    line.audioCtx.type = 'square';
                    break;
                case 'triangle':
                    line.audioCtx.type = 'triangle';
                    break;
                case 'custom':
                    
                    break;
            }
            line.source.frequency.value = line.audio.frequency;
        }

    }
}

function editLine(id: string) {
    currentLine = getLine(id);
    (document.querySelector('#wave-panel') as HTMLDivElement).style.transform = 'translateX(-110%)';
    (document.querySelector('#audio-panel') as HTMLDivElement).style.transform = 'translateX(0)';
    if (currentLine.audio) {
        (document.querySelector(`#wave-select`) as HTMLInputElement).value = currentLine.audio.waveType;
        for (const val in currentLine.audio) {
            if (val == 'custom' || val == 'waveType' || val == 'bias') continue;
            (document.querySelector(`#${val}-slider`) as HTMLInputElement).value = (currentLine.audio as any)[val];
            (document.querySelector(`#${val}-input`)  as HTMLInputElement).value = (currentLine.audio as any)[val];
        }
    }
}

function getUniqueLineId(type: LineType) {
    let i = lines.length;
    let id: string;
    do {
        id = (type == LineType.audio ? 'audioLine' : 'line') + i;
        i++;
    }
    while (lines.find((line) => {
        if (line.id == id) return true;
    }));
    return id;
}

function getLine(id: string) {
    const line = lines.find((line) => {
        if (line.id == id) return true;
    });
    if (!line) throw new Error('Line with this ID does not exist');
    return line;
}

function addSliderSyncGroup(idPrefix: string, min: number, max: number, callback: (value: number, e: InputEvent) => void) {
    const slider = document.querySelector(`#${idPrefix}-slider`) as HTMLInputElement;
    const input = document.querySelector(`#${idPrefix}-input`) as HTMLInputElement;
    slider.addEventListener('input', (e) => {
        input.value = slider.value;
        callback(parseInt(slider.value), e as InputEvent);
    });
    input.addEventListener('input', (e) => {
        let val = parseInt(input.value);
        if (isNaN(val)) return;
        if (val < min) val = min;
        if (val > max) val = max;
        slider.value = val.toString();
        input.value = val.toString();
        callback(val, e as InputEvent);
    });
}

function playAudio(pfn: (x: number) => number) {
    const audioCtx = new AudioContext();//|| window.webkitAudioContext
    //console.log(audioCtx.sampleRate);
    const myArrayBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate, audioCtx.sampleRate);

    let nowBuffering = myArrayBuffer.getChannelData(0);
    for (var i = 0; i < myArrayBuffer.length; i++) {
        nowBuffering[i] = pfn(i / audioCtx.sampleRate);//Math.sin(i * 2 * Math.PI / audioCtx.sampleRate * 1000);//Math.random() * 2 - 1; 
    }

    //currentLine.playing = true;

    const source = audioCtx.createOscillator();

    // const source = audioCtx.createBufferSource();
    // source.buffer = myArrayBuffer;
    source.connect(audioCtx.destination);
    // source.loop = true;
    //source.start()
    return source;
}

// function test() {
    
//     const fn = (x: number) => {
//         //return Math.sin(x);
//         return (Math.abs(parseInt((x).toFixed(0)))) % 2 - 1 / 2;
//         //return 0.5 * (Math.sin(200 * x) + Math.sin(400 * x) + Math.sin(800 * x));
//         //return 100 * Math.cos(x * 2 * Math.PI);
//     }
//     const fn2 = (x: number) => {
//         return 1 / x;
//     }
//     const fn3 = (x: number) => {
//         return Math.sin(x);
//     }
//     graph.addLine(fn, "red");
//     graph.addLine(fn2, "#2222FF");
//     graph.addLine(fn3, "#00FF00");
//     graph.draw();
//     //play(fn);
// }



    // waveList.innerHTML = waveList.innerHTML + `
    //     <div class="sub-container rounded wave-box" id="${id}">
    //         <div class="input-group">
    //             <a type="button" class="btn btn-secondary wave-btn">
    //                 <img src="/assets/images/about.svg">
    //             </a>
    //             <input type="text" class="form-control" value="${id}">
    //             <a type="button" class="btn btn-success wave-btn">
    //                 <img src="/assets/images/play.svg">
    //             </a>
    //             <a type="button" class="btn btn-secondary wave-btn">
    //                 <img src="/assets/images/settings.svg">
    //             </a>
    //             <a type="button" class="btn btn-danger wave-btn">
    //                 <img src="/assets/images/trash.svg">
    //             </a>
    //         </div>
    //         <div class="input-group mt-2">
    //             <span class="input-group-text input-label-box">f(x):</span>
    //             <input type="text" class="form-control">
    //         </div>
    //     </div>
    // `;
